import json
import random

import owiener
import sympy
import hashlib
import math

from Crypto.Util.number import bytes_to_long, long_to_bytes


def json_recv(r):
    return json.loads(r.recvline().decode())


def json_send(r, hsh):
    r.sendline(json.dumps(hsh).encode())


def test1():
    print(pow(101, 17, 22663))


def test2():
    e = 65537
    p = 17
    q = 23
    s = 12
    print(pow(s, e, p * q))


def test3():
    p = 857504083339712752489993810777
    q = 1029224947942998075080348647219
    N = p * q
    print(sympy.totient(p) * sympy.totient(q))


def test4():
    p = 857504083339712752489993810777
    q = 1029224947942998075080348647219
    e = 65537
    fi_N = sympy.totient(p) * sympy.totient(q)
    print(sympy.mod_inverse(e, fi_N))


def test5():
    p = 857504083339712752489993810777
    q = 1029224947942998075080348647219
    assert p * q == 882564595536224140639625987659416029426239230804614613279163
    e = 65537
    c = 77578995801157823671636298847186723593814843845525223303932
    fi_N = sympy.totient(p) * sympy.totient(q)
    d = sympy.mod_inverse(e, fi_N)
    print(pow(c, d, p*q))


def test6():
    f = 'crypto{Immut4ble_m3ssag1ng}'
    N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803
    d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689
    sha256 = hashlib.sha256()
    sha256.update(f.encode('ascii'))
    H = sha256.digest()
    h = bytes_to_long(H)
    S = pow(h, d, N)
    print(hex(S)[2:])


def test7():
    N = 510143758735509025530880200653196460532653147
    l = sympy.primefactors(N)
    print(min(l))


def test8():
    n = 742449129124467073921545687640895127535705902454369756401331
    e = 3
    ct = 39207274348578481322317340648475596807303160111338236677373
    """
    l = sympy.primefactors(n)
    print(l)
    p = l[0]
    q = l[1]
    """
    """
    Sage:
    n = 742449129124467073921545687640895127535705902454369756401331
    F = factor(n)
    print(F)
    """
    p, q = 752708788837165590355094155871, 986369682585281993933185289261
    fi_N = sympy.totient(p) * sympy.totient(q)
    d = sympy.mod_inverse(e, fi_N)
    S = pow(ct, d, n)
    print(long_to_bytes(S).decode())


def test9():
    n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591
    e = 65537
    ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942

    p = n
    q = 1
    fi_N = sympy.totient(p) * sympy.totient(q)
    d = sympy.mod_inverse(e, fi_N)
    S = pow(ct, d, n)
    print(long_to_bytes(S).decode())


def test10():
    N = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449
    e = 65537
    c = 222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896

    p = math.isqrt(N)
    #fi_N = sympy.totient(p) * sympy.totient(q)
    # n = p1**k1 * p2**k2 * ...
    # fi(N) = p1**(k1-1) * (p1 - 1) * ...
    fi_N = p * (p-1)
    d = sympy.mod_inverse(e, fi_N)
    S = pow(c, d, N)
    print(long_to_bytes(S).decode())


def test11():
    n = 580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637
    e = 65537
    ct = 320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464

    """
    Sage:
    ecm.factor(580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637)
    """
    l = [9282105380008121879,
         9303850685953812323,
         9389357739583927789,
         10336650220878499841,
         10638241655447339831,
         11282698189561966721,
         11328768673634243077,
         11403460639036243901,
         11473665579512371723,
         11492065299277279799,
         11530534813954192171,
         11665347949879312361,
         12132158321859677597,
         12834461276877415051,
         12955403765595949597,
         12973972336777979701,
         13099895578757581201,
         13572286589428162097,
         14100640260554622013,
         14178869592193599187,
         14278240802299816541,
         14523070016044624039,
         14963354250199553339,
         15364597561881860737,
         15669758663523555763,
         15824122791679574573,
         15998365463074268941,
         16656402470578844539,
         16898740504023346457,
         17138336856793050757,
         17174065872156629921,
         17281246625998849649]
    fi_N = 1
    # z formu≈Çy jak w poprzednim
    for p in l:
        fi_N *= (p - 1)
    d = sympy.mod_inverse(e, fi_N)
    S = pow(ct, d, n)
    print(long_to_bytes(S).decode())


def test12():
    n = 110581795715958566206600392161360212579669637391437097703685154237017351570464767725324182051199901920318211290404777259728923614917211291562555864753005179326101890427669819834642007924406862482343614488768256951616086287044725034412802176312273081322195866046098595306261781788276570920467840172004530873767
    e = 1
    ct = 44981230718212183604274785925793145442655465025264554046028251311164494127485
    print(long_to_bytes(ct).decode())


def test13():
    n = 17258212916191948536348548470938004244269544560039009244721959293554822498047075403658429865201816363311805874117705688359853941515579440852166618074161313773416434156467811969628473425365608002907061241714688204565170146117869742910273064909154666642642308154422770994836108669814632309362483307560217924183202838588431342622551598499747369771295105890359290073146330677383341121242366368309126850094371525078749496850520075015636716490087482193603562501577348571256210991732071282478547626856068209192987351212490642903450263288650415552403935705444809043563866466823492258216747445926536608548665086042098252335883
    e = 3
    ct = 243251053617903760309941844835411292373350655973075480264001352919865180151222189820473358411037759381328642957324889519192337152355302808400638052620580409813222660643570085177957

    # ct << n
    print(long_to_bytes(sympy.integer_nthroot(ct, 3)[0]).decode())


def test14():
    # https://en.wikipedia.org/wiki/Wiener%27s_attack
    N = 0xb8af3d3afb893a602de4afe2a29d7615075d1e570f8bad8ebbe9b5b9076594cf06b6e7b30905b6420e950043380ea746f0a14dae34469aa723e946e484a58bcd92d1039105871ffd63ffe64534b7d7f8d84b4a569723f7a833e6daf5e182d658655f739a4e37bd9f4a44aff6ca0255cda5313c3048f56eed5b21dc8d88bf5a8f8379eac83d8523e484fa6ae8dbcb239e65d3777829a6903d779cd2498b255fcf275e5f49471f35992435ee7cade98c8e82a8beb5ce1749349caa16759afc4e799edb12d299374d748a9e3c82e1cc983cdf9daec0a2739dadcc0982c1e7e492139cbff18c5d44529407edfd8e75743d2f51ce2b58573fea6fbd4fe25154b9964d
    e = 0x9ab58dbc8049b574c361573955f08ea69f97ecf37400f9626d8f5ac55ca087165ce5e1f459ef6fa5f158cc8e75cb400a7473e89dd38922ead221b33bc33d6d716fb0e4e127b0fc18a197daf856a7062b49fba7a86e3a138956af04f481b7a7d481994aeebc2672e500f3f6d8c581268c2cfad4845158f79c2ef28f242f4fa8f6e573b8723a752d96169c9d885ada59cdeb6dbe932de86a019a7e8fc8aeb07748cfb272bd36d94fe83351252187c2e0bc58bb7a0a0af154b63397e6c68af4314601e29b07caed301b6831cf34caa579eb42a8c8bf69898d04b495174b5d7de0f20cf2b8fc55ed35c6ad157d3e7009f16d6b61786ee40583850e67af13e9d25be3
    c = 0x3f984ff5244f1836ed69361f29905ca1ae6b3dcf249133c398d7762f5e277919174694293989144c9d25e940d2f66058b2289c75d1b8d0729f9a7c4564404a5fd4313675f85f31b47156068878e236c5635156b0fa21e24346c2041ae42423078577a1413f41375a4d49296ab17910ae214b45155c4570f95ca874ccae9fa80433a1ab453cbb28d780c2f1f4dc7071c93aff3924d76c5b4068a0371dff82531313f281a8acadaa2bd5078d3ddcefcb981f37ff9b8b14c7d9bf1accffe7857160982a2c7d9ee01d3e82265eec9c7401ecc7f02581fd0d912684f42d1b71df87a1ca51515aab4e58fab4da96e154ea6cdfb573a71d81b2ea4a080a1066e1bc3474
    d = owiener.attack(e, N)
    S = pow(c, d, N)
    print(long_to_bytes(S).decode())


def algo_d_N(d, e, N):
    k = d * e - 1
    while True:
        g = random.randint(1, N)
        t = 0
        p = q = None
        while True:
            t += 1
            tt = 2**t
            ttt = k//tt
            x = pow(g, ttt, N)
            if x <= 1:
                continue
            y = math.gcd(x - 1, N)
            if y > 1:
                p = y
                q = N//y
                break
        if p and q:
            break
    assert p * q == N
    return p, q


def test15():
    My_private_key = (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771,
                      2734411677251148030723138005716109733838866545375527602018255159319631026653190783670493107936401603981429171880504360560494771017246468702902647370954220312452541342858747590576273775107870450853533717116684326976263006435733382045807971890762018747729574021057430331778033982359184838159747331236538501849965329264774927607570410347019418407451937875684373454982306923178403161216817237890962651214718831954215200637651103907209347900857824722653217179548148145687181377220544864521808230122730967452981435355334932104265488075777638608041325256776275200067541533022527964743478554948792578057708522350812154888097)
    My_Friends_public_keys = [
        (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 106979), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 108533), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 69557), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 97117), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 103231)]
    Encrypted_flag = 20304610279578186738172766224224793119885071262464464448863461184092225736054747976985179673905441502689126216282897704508745403799054734121583968853999791604281615154100736259131453424385364324630229671185343778172807262640709301838274824603101692485662726226902121105591137437331463201881264245562214012160875177167442010952439360623396658974413900469093836794752270399520074596329058725874834082188697377597949405779039139194196065364426213208345461407030771089787529200057105746584493554722790592530472869581310117300343461207750821737840042745530876391793484035024644475535353227851321505537398888106855012746117

    e = 0x10001
    N, d = My_private_key
    c = Encrypted_flag
    p, q = algo_d_N(d, e, N)
    fi = (p - 1) * (q - 1)
    flag = c
    for nf, ef in My_Friends_public_keys:
        assert nf == N
        df = sympy.mod_inverse(ef, fi)
        flag = pow(flag, df, N)
    print(long_to_bytes(flag).decode())


def gau_red(v1, v2):
    import numpy as np
    # https://link-1springer-1com-1q12c56yg1f6a.eczyt.bg.pw.edu.pl/book/10.1007/978-0-387-77993-5
    while True:
        v1, v2 = (v2, v1) if v1.dot(v1) > v2.dot(v2) else (v1, v2)
        m = int(np.rint(v1.dot(v2) / v1.dot(v1)))
        if m == 0:
            break
        v2 = v2 - m * v1
    return v1, v2


def test16():
    """
    https://www.di.ens.fr/~pnguyen/PubSantanderNotes.pdf
    p, q ~ 1024, e ~2046, d mo≈ºe byƒá ma≈Çe
    e * d = 1 mod phi (bo d = inverse(e, phi)) -> e * d = 1 + k * phi
    e * d - k * p * q = 1 + k * (1 - (p + q)) ~ O(d * N**0.5 - bo p i q ~ N**0.5)
    M = [[e, N**0.5],[N, 0]]
    ed - kn, d N**0.5 to kr√≥tki wektor vec
    vec = [ed - kN, d N**0.5]
    d = vec[1] // d ** 0.5
    """
    import numpy as np
    N = 0x665166804cd78e8197073f65f58bca14e019982245fcc7cad74535e948a4e0258b2e919bf3720968a00e5240c5e1d6b8831d8fec300d969fccec6cce11dde826d3fbe0837194f2dc64194c78379440671563c6c75267f0286d779e6d91d3e9037c642a860a894d8c45b7ed564d341501cedf260d3019234f2964ccc6c56b6de8a4f66667e9672a03f6c29d95100cdf5cb363d66f2131823a953621680300ab3a2eb51c12999b6d4249dde499055584925399f3a8c7a4a5a21f095878e80bbc772f785d2cbf70a87c6b854eb566e1e1beb7d4ac6eb46023b3dc7fdf34529a40f5fc5797f9c15c54ed4cb018c072168e9c30ca3602e00ea4047d2e5686c6eb37b9
    e = 0x2c998e57bc651fe4807443dbb3e794711ca22b473d7792a64b7a326538dc528a17c79c72e425bf29937e47b2d6f6330ee5c13bfd8564b50e49132d47befd0ee2e85f4bfe2c9452d62ef838d487c099b3d7c80f14e362b3d97ca4774f1e4e851d38a4a834b077ded3d40cd20ddc45d57581beaa7b4d299da9dec8a1f361c808637238fa368e07c7d08f5654c7b2f8a90d47857e9b9c0a81a46769f6307d5a4442707afb017959d9a681fa1dc8d97565e55f02df34b04a3d0a0bf98b7798d7084db4b3f6696fa139f83ada3dc70d0b4c57bf49f530dec938096071f9c4498fdef9641dfbfe516c985b27d1748cc6ce1a4beb1381fb165a3d14f61032e0f76f095d
    c = 0x503d5dd3bf3d76918b868c0789c81b4a384184ddadef81142eabdcb78656632e54c9cb22ac2c41178607aa41adebdf89cd24ec1876365994f54f2b8fc492636b59382eb5094c46b5818cf8d9b42aed7e8051d7ca1537202d20ef945876e94f502e048ad71c7ad89200341f8071dc73c2cc1c7688494cad0110fca4854ee6a1ba999005a650062a5d55063693e8b018b08c4591946a3fc961dae2ba0c046f0848fbe5206d56767aae8812d55ee9decc1587cf5905887846cd3ecc6fc069e40d36b29ee48229c0c79eceab9a95b11d15421b8585a2576a63b9f09c56a4ca1729680410da237ac5b05850604e2af1f4ede9cf3928cbb3193a159e64482928b585ac
    s = math.isqrt(N)
    v = np.array([e, s], dtype='object')
    u = np.array([N, 0], dtype='object')
    ds = gau_red(v, u)
    print(ds)
    D = []
    for vec in ds:
        D.append(abs(vec[1]) // s)
    for d in D:
        try:
            S = pow(c, d, N)
            print(long_to_bytes(S).decode())
        except:
            continue


def test18():
    n = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051
    e = 65537
    c = 98280456757136766244944891987028935843441533415613592591358482906016439563076150526116369842213103333480506705993633901994107281890187248495507270868621384652207697607019899166492132408348789252555196428608661320671877412710489782358282011364127799563335562917707783563681920786994453004763755404510541574502176243896756839917991848428091594919111448023948527766368304503100650379914153058191140072528095898576018893829830104362124927140555107994114143042266758709328068902664037870075742542194318059191313468675939426810988239079424823495317464035252325521917592045198152643533223015952702649249494753395100973534541766285551891859649320371178562200252228779395393974169736998523394598517174182142007480526603025578004665936854657294541338697513521007818552254811797566860763442604365744596444735991732790926343720102293453429936734206246109968817158815749927063561835274636195149702317415680401987150336994583752062565237605953153790371155918439941193401473271753038180560129784192800351649724465553733201451581525173536731674524145027931923204961274369826379325051601238308635192540223484055096203293400419816024111797903442864181965959247745006822690967920957905188441550106930799896292835287867403979631824085790047851383294389

    l = sympy.primefactors(n)  # dzia≈Ça szybko bo liczby sƒÖ obok siebie
    print(l)
    p = l[0]
    q = l[1]
    fi_N = sympy.totient(p) * sympy.totient(q)
    d = sympy.mod_inverse(e, fi_N)
    S = pow(c, d, n)
    print(long_to_bytes(S).decode())


def test19():
    """
    https://en.wikipedia.org/wiki/Mersenne_prime
    """
    n = 658416274830184544125027519921443515789888264156074733099244040126213682497714032798116399288176502462829255784525977722903018714434309698108208388664768262754316426220651576623731617882923164117579624827261244506084274371250277849351631679441171018418018498039996472549893150577189302871520311715179730714312181456245097848491669795997289830612988058523968384808822828370900198489249243399165125219244753790779764466236965135793576516193213175061401667388622228362042717054014679032953441034021506856017081062617572351195418505899388715709795992029559042119783423597324707100694064675909238717573058764118893225111602703838080618565401139902143069901117174204252871948846864436771808616432457102844534843857198735242005309073939051433790946726672234643259349535186268571629077937597838801337973092285608744209951533199868228040004432132597073390363357892379997655878857696334892216345070227646749851381208554044940444182864026513709449823489593439017366358869648168238735087593808344484365136284219725233811605331815007424582890821887260682886632543613109252862114326372077785369292570900594814481097443781269562647303671428895764224084402259605109600363098950091998891375812839523613295667253813978434879172781217285652895469194181218343078754501694746598738215243769747956572555989594598180639098344891175879455994652382137038240166358066403475457
    e = 65537
    c = 400280463088930432319280359115194977582517363610532464295210669530407870753439127455401384569705425621445943992963380983084917385428631223046908837804126399345875252917090184158440305503817193246288672986488987883177380307377025079266030262650932575205141853413302558460364242355531272967481409414783634558791175827816540767545944534238189079030192843288596934979693517964655661507346729751987928147021620165009965051933278913952899114253301044747587310830419190623282578931589587504555005361571572561916866063458812965314474160499067525067495140150092119620928363007467390920130717521169105167963364154636472055084012592138570354390246779276003156184676298710746583104700516466091034510765027167956117869051938116457370384737440965109619578227422049806566060571831017610877072484262724789571076529586427405780121096546942812322324807145137017942266863534989082115189065560011841150908380937354301243153206428896320576609904361937035263985348984794208198892615898907005955403529470847124269512316191753950203794578656029324506688293446571598506042198219080325747328636232040936761788558421528960279832802127562115852304946867628316502959562274485483867481731149338209009753229463924855930103271197831370982488703456463385914801246828662212622006947380115549529820197355738525329885232170215757585685484402344437894981555179129287164971002033759724456
    ps = [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279, 2203, 2281, 3217, 4253, 4423, 9689, 9941, 11213, 19937, 21701, 23209, 44497, 86243, 110503, 132049, 216091, 756839, 859433, 1257787, 1398269, 2976221, 3021377, 6972593, 13466917, 20996011, 24036583, 25964951, 30402457, 32582657, 37156667, 42643801, 43112609, 57885161, 74207281, 77232917, 82589933]
    for p1 in ps:
        found = False
        for p2 in ps:
            if (2**p1 - 1) * (2**p2 - 1) == n:
                found = True
                break
        if found:
            break

    p = 2**p1 - 1
    q = 2**p2 - 1
    fi_N = sympy.totient(p) * sympy.totient(q)
    d = sympy.mod_inverse(e, fi_N)
    S = pow(c, d, n)
    print(long_to_bytes(S).decode())


def test20():
    # https://crypto.stackexchange.com/questions/52292/what-is-fast-prime
    c = 0x249d72cd1d287b1a15a3881f2bff5788bc4bf62c789f2df44d88aae805b54c9a94b8944c0ba798f70062b66160fee312b98879f1dd5d17b33095feb3c5830d28
    k = 'MFswDQYJKoZIhvcNAQEBBQADSgAwRwJATKIe3jfj1qY7zuX5Eg0JifAUOq6RUwLzRuiru4QKcvtW0Uh1KMp1GVt4MmKDiQksTok/pKbJsBFCZugFsS3AjQIDAQAB'

    """
    $ openssl rsa -pubin  -in 20_key.pem  -text -noout -modulus
    RSA Public-Key: (511 bit)
    Modulus:
        4c:a2:1e:de:37:e3:d6:a6:3b:ce:e5:f9:12:0d:09:
        89:f0:14:3a:ae:91:53:02:f3:46:e8:ab:bb:84:0a:
        72:fb:56:d1:48:75:28:ca:75:19:5b:78:32:62:83:
        89:09:2c:4e:89:3f:a4:a6:c9:b0:11:42:66:e8:05:
        b1:2d:c0:8d
    Exponent: 65537 (0x10001)
    Modulus=4CA21EDE37E3D6A63BCEE5F9120D0989F0143AAE915302F346E8ABBB840A72FB56D1487528CA75195B7832628389092C4E893FA4A6C9B0114266E805B12DC08D
    
    """
    """
    https://github.com/FlorianPicca/ROCA
    $ python3 roca_attack.py
    found factorization:
    p=77342270837753916396402614215980760127245056504361515489809293852222206596161
    q=51894141255108267693828471848483688186015845988173648228318286999011443419469
    """
    n = 0x4CA21EDE37E3D6A63BCEE5F9120D0989F0143AAE915302F346E8ABBB840A72FB56D1487528CA75195B7832628389092C4E893FA4A6C9B0114266E805B12DC08D
    e = 65537
    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_OAEP

    e = 65537
    c = 0x249d72cd1d287b1a15a3881f2bff5788bc4bf62c789f2df44d88aae805b54c9a94b8944c0ba798f70062b66160fee312b98879f1dd5d17b33095feb3c5830d28
    p=77342270837753916396402614215980760127245056504361515489809293852222206596161
    q=51894141255108267693828471848483688186015845988173648228318286999011443419469
    assert p * q == n
    fi_N = sympy.totient(p) * sympy.totient(q)
    d = sympy.mod_inverse(e, fi_N)
    key = RSA.construct((n, e, d))
    cipher = PKCS1_OAEP.new(key)
    print(cipher.decrypt(bytes.fromhex(hex(c)[2:])).decode())


def test21():
    import rsa
    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_OAEP
    ns = {}
    primes = {}
    for i in range(1, 51):
        with open(f'{__file__}/../21/{i}.pem', 'rb') as pubkeyfile:
            pubkey = rsa.PublicKey.load_pkcs1_openssl_pem(pubkeyfile.read())
            ns[i] = pubkey.n
    for i in range(1, 51):
        ni = ns[i]
        for j in range(i + 1, 51):
            gcd = math.gcd(ns[i], ns[j])
            if gcd != 1:
                primes[i] = [gcd, ns[i] // gcd]
                primes[j] = primes.get(i)
    print(primes)
    for k, v in primes.items():
        with open(f'{__file__}/../21/{k}.ciphertext', 'r') as cipherfile:
            print(c := int(cipherfile.read(), 16))
            p, q = v
            n = p * q
            e = 65537
            fi_N = sympy.totient(p) * sympy.totient(q)
            d = sympy.mod_inverse(e, fi_N)
            key = RSA.construct((n, e, d))
            cipher = PKCS1_OAEP.new(key)
            print(cipher.decrypt(long_to_bytes(c)).decode())
            break


def test25():
    # W RSA podpis to odszyfrowanie!
    from pwn import remote
    r = remote('socket.cryptohack.org', 13374, level='debug')
    print(r.recvuntil(b'Welcome to my signing server. You can get_pubkey, get_secret, or sign.\n'))
    json_send(r, {'option': 'get_secret'})
    print(s := json_recv(r))
    secret = s['secret']
    json_send(r, {'option': 'sign', 'msg': secret})
    print(sig := json_recv(r))
    print(long_to_bytes(int(sig['signature'], 16)).decode())
    print(r.recvall())


def test26():
    """
    dowolne e
    podpis jest wiƒôkszy od wiadomo≈õci kt√≥rƒÖ chcemy wys≈Çaƒá
    serwer sprawdza:
    digest = emsa_pkcs1_v15.encode(msg.encode(), 256)
            calculated_digest = pow(SIGNATURE, e, n)

            if bytes_to_long(digest) == calculated_digest:

    zatem wystarczy ≈ºeby n = SIGNATURE - digest

    """
    from pwn import remote
    from pkcs1 import emsa_pkcs1_v15
    r = remote('socket.cryptohack.org', 13391, level='debug')
    print(r.recvuntil(b'This server validates domain ownership with RSA signatures. Present your message and public key, and if the signature matches ours, you must own the domain.\n'))

    json_send(r, {'option': 'get_signature'})
    print(smsg := json_recv(r))
    print(sig := int(smsg['signature'], 16))
    print(N := int(smsg['N'], 16))
    msg = 'I am Malloryown CryptoHack.org'
    m = int(bytes.hex(emsa_pkcs1_v15.encode(msg.encode(), 256)), 16)
    assert N > m
    json_send(r, {"option": "verify", "msg": msg, "N": hex(sig - m), "e": "0x01"})
    print(json_recv(r)["msg"])


test15()

"""
write-up
Everything is Still Big

https://www.di.ens.fr/~pnguyen/PubSantanderNotes.pdf (34+)
p, q ~ 1024, e ~2046, ale d byƒá mo≈ºe ma≈Çe
e * d = 1 mod phi (bo d = inverse(e, phi)) -> istnieje k, ≈ºe: e * d = 1 + k * phi, k rzƒôdu d (bo e +- rzƒôdu phi)
zatem (rozpisujƒÖc phi): e * d - k * p * q = 1 + k * (1 - (p + q)) ~ O(d * N**0.5 - bo p i q ~ N**0.5)
M = [[e, N**0.5],[N, 0]]
ed - kn, d N**0.5 to kr√≥tki wektor vec
vec = [ed - kN, d N**0.5]
d = vec[1] // d ** 0.5

Mo≈ºna u≈ºyƒá redukcji Gaussa i sprawdziƒá mo≈ºliwo≈õci.

"""